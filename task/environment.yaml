apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: environment
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: ""
    tekton.dev/displayName: ""
    tekton.dev/platforms: "linux/amd64"
spec:
  description: |
    Setup environment.

    This task sets up the environment to use during the predicted run through
    the pipeline.

  workspaces:
  - name: build-harness
    description: A workspace for build-harness
  - name: deploy-repo
    description: A workspace for deploy-repo

  params:
    - name: build-harness
      type: string
      description: Pathway to use the tool build-harness
    - name: deploy-repo
      type: string
      description: Pathway to use the tool deploy-repo
    - name: clusterclaim-role
      type: string
      description: Name of the cluster to be claimed
    - name: snapshot
      type: string
      description: Snapshot to use for deploy
    - name: botty
      type: string
      description: User for deploy access
      default: bottyDeploy

  results:    
    - name: clusterclaim-name
      description: The name of the claimed cluster
    - name: clusterclaim-user
      description: The user cred of the claimed cluster
    - name: clusterclaim-pass
      description: The pass cred of the claimed cluster
    - name: clusterclaim-api
      description: The api of the claimed cluster
    - name: clusterclaim-kubeconfig
      description: The kubeconfig of the claimed cluster

  steps:
    - name: clusterclaim-checkout
      image: quay.io/emmacdon/simple-dev:latest
      script: |
        cd $(params.build-harness)

        CP_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        CP_API=$(oc whoami --show-console | sed ‘s/console-openshift-console.apps/api/g’`:6443)

        RANDOM_IDENTIFIER=$(head /dev/urandom | LC_CTYPE=C tr -dc a-z0-9 | head -c 5 ; echo '')
        ${clusterclaim-role}=${clusterclaim-role}-$RANDOM_IDENTIFIER

        make clusterpool/list-clusterpools CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_LIST_ARGUMENTS=" -o json"  | jq -r '.items[] | select(.status.ready > 0) | .metadata.name' > available_clusterpools.txt
        clusterpool_to_checkout=$(head -n 1 available_clusterpools.txt)
        make clusterpool/checkout CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_NAME=$clusterpool_to_checkout CLUSTERPOOL_CLUSTER_CLAIM=$CLUSTERCLAIM_NAME

        echo -n ${clusterclaim-role} > $(results.clusterclaim-name.path)
        echo -n $(make clusterpool/get-cluster-username CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_CLUSTER_CLAIM=$CLUSTERCLAIM_NAME) > $(results.clusterclaim-user.path)
        echo -n $(make clusterpool/get-cluster-password CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_CLUSTER_CLAIM=$CLUSTERCLAIM_NAME) > $(results.clusterclaim-pass.path)
        echo -n $(make clusterpool/get-cluster-api CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_CLUSTER_CLAIM=$CLUSTERCLAIM_NAME) > $(results.clusterclaim-api.path)
        echo -n $(make clusterpool/get-cluster-kubeconfig CLUSTERPOOL_HOST_TOKEN=$CP_TOKEN CLUSTERPOOL_HOST_API=$CP_API CLUSTERPOOL_CLUSTER_CLAIM=$CLUSTERCLAIM_NAME) > $(results.clusterclaim-kubeconfig.path)
      env:
        - name: CLUSTERPOOL_NAME
          value: $(params.CLUSTERCLAIM_NAME)
    - name: clusterclaim-deploy
      image: quay.io/emmacdon/simple-dev:latest
      script: |
        cd $(params.deploy-repo)

        set +x
        echo "test"
        set -x

        export COMPOSITE_BUNDLE="true"
        export QUAY_TOKEN=${botty-token}
        export DEBUG=true

        oc login ${claim-api} -u ${claim-user} -p ${claim-pass}
        echo "${snapshot}" | ./start.sh --watch
      env:
        - name: snapshot
          value: $(params.snapshot)
        - name: claim-user
          value: $(results.clusterclaim-user.path)
        - name: claim-pass
          value: $(results.clusterclaim-pass.path)
        - name: claim-api
          value: $(results.clusterclaim-api.path)
        - name: botty-token
          valueFrom:
            secretKeyRef:
              name: $(params.botty)
              key: token
